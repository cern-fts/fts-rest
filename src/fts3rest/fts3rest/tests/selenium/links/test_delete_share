#!/usr/bin/python
import unittest, time
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from pyvirtualdisplay import Display

class FTS3develSeTab(unittest.TestCase):

    def setUp(self):
        self.display = Display(visible=0, size=(800, 600))
        self.display.start()
        profile = webdriver.FirefoxProfile('/home/jenkins/.mozilla/firefox/browser/default/jenkins')
        self.driver = webdriver.Firefox(profile)

    def test_delete_share(self):
        """
        Test delete button for share configuration + delete all trash from the tests(if it is)
        """
        driver = self.driver
        driver.get("https://fts3-devel.cern.ch:8446/config/links")

        #SET UP data for the test
        setup_list = [
            ("test13", "test13://test.test", "test://test0.test", "0", "2","2", "0", "0")
        ]

        for element in setup_list:
            count = 0
            symbname_field = driver.find_element_by_xpath('//input[@name="symbolicname"]')
            symbname_field.clear()
            symbname_field.send_keys(element[0])

            source_field = driver.find_element_by_id('link-add-field-source')
            source_field.clear()
            source_field.send_keys(element[1])

            destination_field = driver.find_element_by_id('link-add-field-destination')
            destination_field.clear()
            destination_field.send_keys(element[2])

            streams_field = driver.find_element_by_xpath('//input[@name="nostreams"]')
            streams_field.clear()
            streams_field.send_keys(element[3])

            minact_field = driver.find_element_by_xpath('//input[@name="min_active"]')
            minact_field.clear()
            minact_field.send_keys(element[4])

            maxact_field = driver.find_element_by_xpath('//input[@name="max_active"]')
            maxact_field.clear()
            maxact_field.send_keys(element[5])

            optimizer_field = driver.find_element_by_xpath('//input[@name="optimizer_mode"]')
            optimizer_field.clear()
            optimizer_field.send_keys(element[6])

            tcp_field = driver.find_element_by_xpath('//input[@name="tcp_buffer_size"]')
            tcp_field.clear()
            tcp_field.send_keys(element[7])

            button_add = driver.find_element_by_id('button_add_link')
            button_add.click()
            time.sleep(1)

        #CHECK IF EVERYTHING WAS SAVED
        check0_list = []
        check1_list = []

        count = 0
        page_list = driver.find_elements_by_id('symname')
        for elem in page_list:
            check0_list.append(elem.text)
        count = count + 1

        count = 0
        for element in setup_list:
            check1_list.append(element[0])
        count = count + 1

        if not set(check1_list) < set(check0_list):
            return self.assertFalse("SETUP: Problem with adding link configuration", set(check1_list) - set(check0_list))

        #SET UP add elements to share configuration
        setup2_list = [
            ("test13://test.test", "test://test0.test", "share_0", "2")
        ]

        for element in setup2_list:
            count = 0
            source_field = driver.find_element_by_id('share-add-field-source')
            source_field.clear()
            source_field.click()
            source_field.send_keys(element[0])

            destination_field = driver.find_element_by_id('share-add-field-destination')
            destination_field.clear()
            destination_field.send_keys(element[1])

            vo_field = driver.find_element_by_id('share-add-field-vo')
            vo_field.clear()
            vo_field.send_keys(element[2])

            share_field = driver.find_element_by_xpath('//input[@placeholder="Share"]')
            share_field.send_keys(Keys.CONTROL + 'a')
            share_field.send_keys(Keys.BACKSPACE)
            share_field.send_keys(element[3])

            button_add = driver.find_element_by_id('button_share_link')
            button_add.click()
            time.sleep(1)

        driver.refresh()
        time.sleep(1)

        #CHECK IF IT WAS SAVED
        check2_list = []
        check3_list = []

        count = 0
        page_list = driver.find_elements_by_id('share_name')
        for elem in page_list:
            check2_list.append(elem.text)
        count = count + 1

        count = 0
        for element in setup2_list:
            check3_list.append(element[0])
        count = count + 1

        if not set(check3_list) < set(check2_list):
            return self.assertFalse("SETUP: The share configuration wasn't saved ", set(check3_list) - set(check2_list))


        # TEST test_delete_share

        input_list = [
            ("test13://test.test", "test://test0.test", "share_0", "2"),
            ("test0://test.test", "test://test1.test", "vo_0", "2"),
            ("test1://test.test", "test://test2.test", "vo_1", "58"),
            ("test2://test.test", "test://test3.test", "vo_2", "100"),
            ("test3://test.test", "test://test4.test", "vo_3", "70"),
            ("test4://test.test", "test://test5.test", "vo_4", "30"),
            ("test5://test.test", "test://test0.test", "vo_0", "10"),
            ("test5://test.test", "test://test0.test", "new_0", "15"),  
            ("test6://test.test", "test://test1.test", "vo_1", "20"),
            ("test6://test.test", "test://test1.test", "new_1", "25"),
            ("test7://test.test", "test://test500.test", "vo_10", "65"),
            ("test8://test.test", "test://test1.test", "vo_4", "3.14"),
            ("test9://test.test", "test://test2.test", "vo_5", "-3"),
            ("test10://test.test", "test://test3.test", "vo_6", "$"),
            ("test11://test.test", "test://test4.test", "vo_7", "abc"),
            ("test12://test.test", "test://test9.test", "vo_9", "0"),
            ("test14://test.test", "test://test0.test", "share_0", "33"),
            ("test15://test.test", "test://test1.test", "share_1", "88"),
            ("test16://test.test", "test://test2.test", "share_2", "66"),
            ("test17://test.test", "test://test3.test", "share_3", "11"),
            ("test18://test.test", "test://test4.test", "share_4", "22"),
            ("test19://test.test", "test://test0.test", "share_0", "2"),
            ("test20://test.test", "test://test1.test", "share_1", "58"),
            ("test21://test.test", "test://test2.test", "share_2", "100"),
            ("test22://test.test", "test://test3.test", "share_3", "70"),
            ("test23://test.test", "test://test4.test", "share_4", "30"),
            ("test24://test.test", "test://test7.test", " ", "65"),
            ("test25://test.test", "test://test8.test", "badvo27 badvo", "65"),
            ("test26://test.test", "test://test9.test", "", "65")
        ]

        #FIND ELEMENTS FROM THE INPUT_LIST THAT ARE ON THE PAGE
        check80_list = []
        check81_list = []
        check90_list = []
        check91_list = []

        count = 0
        share_list = driver.find_elements_by_id('share_name')
        vo_list = driver.find_elements_by_id('vo_name')
        for sh,vo in zip(share_list, vo_list):
            check80_list.append(sh.text)
            check81_list.append(vo.text)
        count = count + 1
        zip1 = zip(check80_list, check81_list)

        count = 0
        for element in input_list:
            check90_list.append(element[0])
            check91_list.append(element[2])
        count = count + 1
        zip2 = zip(check90_list, check91_list)
        output_list = set(zip1)&set(zip2)

        #DELETE 
        for element in output_list:
            btn = '//a[@name="shdel_' +element[0] + '_'+element[1]+'"][@class="btn btn-link"]'
            button_delete = driver.find_element_by_xpath(btn)
            button_delete.click()

        driver.refresh()
        time.sleep(1)

        #CHECK IF IT WAS DELETED
        check_list = []
        sh_list = driver.find_elements_by_xpath('//input[@name="share-saved"]')
        for element in input_list:
            count = 0
            sh_list = driver.find_elements_by_xpath('//input[@name="share-saved"]')
            vo_list = driver.find_elements_by_id('vo_name')
            share_list = driver.find_elements_by_id('share_name')
            for sh,vo,s in zip(share_list, vo_list, sh_list):
                if sh.text == element[0] and vo.text==element[2] and s.get_attribute('value')==element[3]:
                    check_list.append(element)
                count = count + 1

        if check_list:
            return self.assertFalse("TEST: The share configuration NOT deleted", check_list)



        # DELETE ELEMENTS FROM LINK CONFIGURATION
        del_list = [
            ("test0", "test0://test.test", "test://test1.test", "0", "2","2", "0", "0"),
            ("test1", "test1://test.test", "test://test2.test", "10", "15", "25", "5", "30"),
            ("test2", "test2://test.test", "test://test3.test", "12", "40", "190", "3", "23"),
            ("test3", "test3://test.test", "test://test4.test", "30", "48", "300", "3", "230"),
            ("test4", "test4://test.test", "test://test5.test", "67", "6", "33", "0", "90"),
            ("test5", "test5://test.test", "test://test0.test", "0", "2","2", "0", "0"),
            ("test6", "test6://test.test", "test://test1.test", "10", "15", "25", "5", "30"),
            ("test7", "test7://test.test", "test://test0.test", "0", "2","2", "0", "0"),
            ("test8", "test8://test.test", "test://test1.test", "10", "15", "25", "5", "30"),
            ("test9", "test9://test.test", "test://test2.test", "1", "150", "250", "5", "70"), 
            ("test10", "test10://test.test", "test://test3.test", "0", "2","2", "0", "0"),
            ("test11", "test11://test.test", "test://test4.test", "10", "15", "25", "5", "30"),
            ("test12", "test12://test.test", "test://test5.test", "1", "150", "250", "5", "70"), 
            ("test13", "test13://test.test", "test://test6.test", "0", "2","2", "0", "0"),
            ("test13", "test13://test.test", "test://test0.test", "0", "2","2", "0", "0"),
            ("test14", "test14://test.test", "test://test0.test", "0", "2","2", "0", "0"),
            ("test15", "test15://test.test", "test://test1.test", "10", "15", "25", "5", "30"),
            ("test16", "test16://test.test", "test://test2.test", "1", "150", "250", "5", "70"), 
            ("test17", "test17://test.test", "test://test3.test", "0", "2","2", "0", "0"),
            ("test18", "test18://test.test", "test://test4.test", "10", "15", "25", "5", "30"),
            ("test19", "test19://test.test", "test://test0.test", "0", "2","2", "0", "0"),
            ("test20", "test20://test.test", "test://test1.test", "10", "15", "25", "5", "30"),
            ("test21", "test21://test.test", "test://test2.test", "1", "150", "250", "5", "70"), 
            ("test22", "test22://test.test", "test://test3.test", "0", "2","2", "0", "0"),
            ("test23", "test23://test.test", "test://test4.test", "10", "15", "25", "5", "30"),
            ("test24", "test24://test.test", "test://test7.test", "0", "2","2", "0", "0"), 
            ("test25", "test25://test.test", "test://test8.test", "0", "2","2", "0", "0"), 
            ("test26", "test26://test.test", "test://test9.test", "0", "2","2", "0", "0")
        ]

        #FIND ELEMENTS FROM THE INPUT_LIST THAT ARE ON THE PAGE
        check6_list = []
        check7_list = []

        count = 0
        page_list = driver.find_elements_by_id('symname')
        for elem in page_list:
            check6_list.append(elem.text)
        count = count + 1

        count = 0
        for element in del_list:
            check7_list.append(element[0])
        count = count + 1
        output_list = set(check6_list)&set(check7_list)


        #DELETE 
        for element in output_list:
            btn = '//button[@name="lndel_' +element + '"][@class="btn btn-link"]'
            button_delete = driver.find_element_by_xpath(btn)
            button_delete.click()

        driver.refresh()

        #CHECK IF IT WAS DELETED
        check4_list = []
        check5_list = []

        count = 0
        page_list = driver.find_elements_by_id('symname')
        for elem in page_list:
            check4_list.append(elem.text)
        count = count + 1

        count = 0
        for element in del_list:
            check5_list.append(element[0])
        count = count + 1

        not_deleted = set(check4_list)&set(check5_list)
        if not_deleted:
            return self.assertFalse("TEST: The link configuration wasn't deleted", not_deleted)



    def tearDown(self):
        self.driver.close()
        self.display.stop()

if __name__ == "__main__":
    unittest.main()

